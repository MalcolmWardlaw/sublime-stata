[
	// Build system
	//{ "keys": ["f7"], "command": "build" },
	//	{ "keys": ["ctrl+b"], "command": "build" },
	//	{ "keys": ["ctrl+shift+b"], "command": "build", "args": {"select": true} },
	//	{ "keys": ["ctrl+break"], "command": "cancel_build" },

	// Autocomplete with the variables of only the relevant dataset, when doing use, merge, etc.
	
	{ "keys": [":"], "command": "autocomplete_colon", "context":
		[
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "meta.local.stata", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": " $" }
		]

	},

	{ "keys": ["ctrl+shift+space"], "command": "stata_autocomplete_var", "args":
		{"menu": "filter"},
		"context":
		[
			{ "key": "selector", "operator": "equal", "operand": "source.stata" },
			{ "key": "num_selections", "operator": "equal", "operand": 1 },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "using[ \t]+" }
		]
	},
	{ "keys": ["ctrl+shift+space"], "command": "stata_autocomplete_var", "args":
		{"menu": "filter"},
		"context":
		[
			{ "key": "selector", "operator": "equal", "operand": "source.stata" },
			{ "key": "num_selections", "operator": "equal", "operand": 1 },
			{ "key": "following_text", "operator": "regex_contains", "operand": "using[ \t]+" }
		]
	},

	// Override "autocomplete" when dealing with DTAs
	{ "keys": ["ctrl+space"], "command": "stata_autocomplete_dta", "context":
		[
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "(use|using)[ \t]+" },
			{ "key": "setting.tab_completion", "operator": "equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "source.stata" }
		]
	},
	// Override "select scope" when dealing with variables
	{ "keys": ["ctrl+shift+space"], "command": "stata_autocomplete_var", "context":
		[
			{ "key": "setting.tab_completion", "operator": "equal", "operand": true },
			{ "key": "selector", "operator": "equal", "operand": "source.stata" }
		]
	},
	// Help (default windows keys)
	{ "keys": ["f1"], "command": "stata_help_internal", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "source.stata" }
		]
	},
	{ "keys": ["shift+f1"], "command": "stata_help_external", "context":
		[
			{ "key": "selector", "operator": "equal", "operand": "source.stata" }
		]
	},
	// Disable expansion ' -> ''
	{ "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|>|$)", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "['a-zA-Z0-9_]$", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.stata", "match_all": true }
		]
	},
	// Disable expansion ' -> '...' when selected
	{ "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.stata", "match_all": true }
		]
	},
	// Disable moving to right when in middle of ''
	{ "keys": ["'"], "command": "insert_snippet", "args": {"contents": "'"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true },
			{ "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.stata", "match_all": true }
		]
	},
	// Allow " -> "" expansion when before a comma
	{ "keys": ["\""], "command": "insert_snippet", "args": {"contents": "\"$0\""}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^,", "match_all": true },
			{ "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\"a-zA-Z0-9_]$", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.stata", "match_all": true }
		]
	},
	// Allow `"' -> `""' expansion (for compound quotes)
	{ "keys": ["\""], "command": "insert_snippet", "args": {"contents": "\"$0\""}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "`$", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.stata", "match_all": true }
		]
	},
	// Disable deleting both '' when in middle and pressing backspace
	{ "keys": ["backspace"], "command": "left_delete", "args": {}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "'$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true },
			{ "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.stata", "match_all": true }
		]
	},
	// Stata `' quotes
	{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`$0'"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.stata", "match_all": true }
		]
	},
	{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`${0:$SELECTION}'"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.stata", "match_all": true }
		]
	},
	{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "res://Packages/Default/Delete Left Right.sublime-macro"}, "context":
		[
			{ "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "`$", "match_all": true },
			{ "key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true },
			{ "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
			{ "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true },
			{ "key": "selector", "operator": "equal", "operand": "source.stata", "match_all": true }
		]
	}
]